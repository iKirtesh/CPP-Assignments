<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Lab 2/4_Factorial.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 2/4_Factorial.cpp" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="#include &lt;iostream&gt;&#13;&#10;using namespace std;&#13;&#10;&#13;&#10;// Program to calculate factorial of a number&#13;&#10;int main() {&#13;&#10;    int n;&#13;&#10;    long long fact = 1;&#13;&#10;    cout &lt;&lt; &quot;Enter a number: &quot;;&#13;&#10;    cin &gt;&gt; n;&#13;&#10;    if (n &lt; 0) {&#13;&#10;        cout &lt;&lt; &quot;Factorial is not defined for negative numbers.&quot; &lt;&lt; endl;&#13;&#10;        return 1;&#13;&#10;    }&#13;&#10;    for (int i = 1; i &lt;= n; ++i) {&#13;&#10;        fact *= i;&#13;&#10;    }&#13;&#10;    cout &lt;&lt; &quot;Factorial of &quot; &lt;&lt; n &lt;&lt; &quot; is: &quot; &lt;&lt; fact &lt;&lt; endl;&#13;&#10;    return 0;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 2/6_GCD.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 2/6_GCD.cpp" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;// Program to calculate GCD of two numbers&#10;&#10;int main() {&#10;    int a, b;&#10;    cout &lt;&lt; &quot;Enter two numbers: &quot;;&#10;    cin &gt;&gt; a &gt;&gt; b;&#10;    int gcd = 1;&#10;    int minVal = (a &lt; b) ? a : b;&#10;    for (int i = 1; i &lt;= minVal; ++i) {&#10;        if (a % i == 0 &amp;&amp; b % i == 0) {&#10;            gcd = i;&#10;        }&#10;    }&#10;    cout &lt;&lt; &quot;GCD of &quot; &lt;&lt; a &lt;&lt; &quot; and &quot; &lt;&lt; b &lt;&lt; &quot; is: &quot; &lt;&lt; gcd &lt;&lt; endl;&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 2/7_AreaMenu.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 2/7_AreaMenu.cpp" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int choice;&#10;    do {&#10;        cout &lt;&lt; &quot;\nMenu:\n&quot;;&#10;        cout &lt;&lt; &quot;1. Compute area of circle\n&quot;;&#10;        cout &lt;&lt; &quot;2. Compute area of rectangle\n&quot;;&#10;        cout &lt;&lt; &quot;3. Compute area of triangle\n&quot;;&#10;        cout &lt;&lt; &quot;4. Exit\n&quot;;&#10;        cout &lt;&lt; &quot;Enter your choice: &quot;;&#10;        cin &gt;&gt; choice;&#10;        switch (choice) {&#10;            case 1: {&#10;                double r;&#10;                cout &lt;&lt; &quot;Enter radius: &quot;;&#10;                cin &gt;&gt; r;&#10;                cout &lt;&lt; &quot;Area of circle: &quot; &lt;&lt; 3.14159 * r * r &lt;&lt; endl;&#10;                break;&#10;            }&#10;            case 2: {&#10;                double l, w;&#10;                cout &lt;&lt; &quot;Enter length and width: &quot;;&#10;                cin &gt;&gt; l &gt;&gt; w;&#10;                cout &lt;&lt; &quot;Area of rectangle: &quot; &lt;&lt; l * w &lt;&lt; endl;&#10;                break;&#10;            }&#10;            case 3: {&#10;                double b, h;&#10;                cout &lt;&lt; &quot;Enter base and height: &quot;;&#10;                cin &gt;&gt; b &gt;&gt; h;&#10;                cout &lt;&lt; &quot;Area of triangle: &quot; &lt;&lt; 0.5 * b * h &lt;&lt; endl;&#10;                break;&#10;            }&#10;            case 4:&#10;                cout &lt;&lt; &quot;Exiting...&quot; &lt;&lt; endl;&#10;                break;&#10;            default:&#10;                cout &lt;&lt; &quot;Invalid choice!&quot; &lt;&lt; endl;&#10;        }&#10;    } while (choice != 4);&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/1_ArrayOps.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/1_ArrayOps.cpp" />
              <option name="originalContent" value="// Program to create an array and find sum, average, max, min&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n;&#10;    cout &lt;&lt; &quot;Enter number of elements: &quot;;&#10;    cin &gt;&gt; n;&#10;    int arr[100];&#10;    int sum = 0, max, min;&#10;    cout &lt;&lt; &quot;Enter elements: &quot;;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        cin &gt;&gt; arr[i];&#10;        sum += arr[i];&#10;        if (i == 0) max = min = arr[i];&#10;        else {&#10;            if (arr[i] &gt; max) max = arr[i];&#10;            if (arr[i] &lt; min) min = arr[i];&#10;        }&#10;    }&#10;    double avg = (double)sum / n;&#10;    cout &lt;&lt; &quot;Sum: &quot; &lt;&lt; sum &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Average: &quot; &lt;&lt; avg &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Maximum: &quot; &lt;&lt; max &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Minimum: &quot; &lt;&lt; min &lt;&lt; endl;&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Program to create an array and find sum, average, max, min&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n;&#10;    cout &lt;&lt; &quot;Enter number of elements: &quot;;&#10;    cin &gt;&gt; n;&#10;&#10;    int arr[100];&#10;    cout &lt;&lt; &quot;Enter elements: &quot;;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        cin &gt;&gt; arr[i];&#10;    }&#10;&#10;    int sum = 0;&#10;    int max = arr[0];&#10;    int min = arr[0];&#10;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        sum += arr[i];&#10;        if (arr[i] &gt; max) {&#10;            max = arr[i];&#10;        }&#10;        if (arr[i] &lt; min) {&#10;            min = arr[i];&#10;        }&#10;    }&#10;&#10;    double avg = static_cast&lt;double&gt;(sum) / n;&#10;&#10;    cout &lt;&lt; &quot;Sum: &quot; &lt;&lt; sum &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Average: &quot; &lt;&lt; avg &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Maximum: &quot; &lt;&lt; max &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Minimum: &quot; &lt;&lt; min &lt;&lt; endl;&#10;&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/2_SumOfDigits.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/2_SumOfDigits.cpp" />
              <option name="updatedContent" value="// Program to accept a number and display its sum of digits&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n, sum = 0;&#10;    cout &lt;&lt; &quot;Enter a number: &quot;;&#10;    cin &gt;&gt; n;&#10;    int temp = n;&#10;    while (temp &gt; 0) {&#10;        sum += temp % 10;&#10;        temp /= 10;&#10;    }&#10;    cout &lt;&lt; &quot;Sum of digits of &quot; &lt;&lt; n &lt;&lt; &quot; is: &quot; &lt;&lt; sum &lt;&lt; endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/3_SumEvenOdd.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/3_SumEvenOdd.cpp" />
              <option name="updatedContent" value="// Program to find sum of all even and odd numbers between 1 to n&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n, evenSum = 0, oddSum = 0;&#10;    cout &lt;&lt; &quot;Enter n: &quot;;&#10;    cin &gt;&gt; n;&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        if (i % 2 == 0)&#10;            evenSum += i;&#10;        else&#10;            oddSum += i;&#10;    }&#10;    cout &lt;&lt; &quot;Sum of even numbers: &quot; &lt;&lt; evenSum &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Sum of odd numbers: &quot; &lt;&lt; oddSum &lt;&lt; endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/4_PrimeNumbers.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/4_PrimeNumbers.cpp" />
              <option name="updatedContent" value="// Program to print all prime numbers between 1 to n&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;bool isPrime(int n) {&#10;    if (n &lt;= 1) return false;&#10;    for (int i = 2; i * i &lt;= n; ++i) {&#10;        if (n % i == 0) return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;int main() {&#10;    int n;&#10;    cout &lt;&lt; &quot;Enter n: &quot;;&#10;    cin &gt;&gt; n;&#10;    cout &lt;&lt; &quot;Prime numbers between 1 and &quot; &lt;&lt; n &lt;&lt; &quot;: &quot;;&#10;    for (int i = 2; i &lt;= n; ++i) {&#10;        if (isPrime(i)) cout &lt;&lt; i &lt;&lt; &quot; &quot;;&#10;    }&#10;    cout &lt;&lt; endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/5_ArraySearch.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/5_ArraySearch.cpp" />
              <option name="updatedContent" value="// Program to search a number in an array&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n, key, found = 0;&#10;    cout &lt;&lt; &quot;Enter number of elements: &quot;;&#10;    cin &gt;&gt; n;&#10;    int arr[100];&#10;    cout &lt;&lt; &quot;Enter elements: &quot;;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        cin &gt;&gt; arr[i];&#10;    }&#10;    cout &lt;&lt; &quot;Enter number to search: &quot;;&#10;    cin &gt;&gt; key;&#10;    for (int i = 0; i &lt; n; ++i) {&#10;        if (arr[i] == key) {&#10;            found = 1;&#10;            break;&#10;        }&#10;    }&#10;    if (found)&#10;        cout &lt;&lt; key &lt;&lt; &quot; is present in the array.&quot; &lt;&lt; endl;&#10;    else&#10;        cout &lt;&lt; key &lt;&lt; &quot; is not present in the array.&quot; &lt;&lt; endl;&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/6_Pattern.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/6_Pattern.cpp" />
              <option name="updatedContent" value="// Program to print a star pattern&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int n = 5;&#10;    for (int i = 1; i &lt;= n; ++i) {&#10;        for (int j = 1; j &lt;= i; ++j) {&#10;            cout &lt;&lt; &quot;* &quot;;&#10;        }&#10;        cout &lt;&lt; endl;&#10;    }&#10;    return 0;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 3/7_StudentClass.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 3/7_StudentClass.cpp" />
              <option name="originalContent" value="// Program to create Student class and display info, total, percentage, grade&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Student {&#10;    int rollno;&#10;    int marks1, marks2, marks3;&#10;public:&#10;    void acceptInfo() {&#10;        cout &lt;&lt; &quot;Enter roll number: &quot;;&#10;        cin &gt;&gt; rollno;&#10;        cout &lt;&lt; &quot;Enter marks for 3 subjects: &quot;;&#10;        cin &gt;&gt; marks1 &gt;&gt; marks2 &gt;&gt; marks3;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Roll No: &quot; &lt;&lt; rollno &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks1: &quot; &lt;&lt; marks1 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks2: &quot; &lt;&lt; marks2 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks3: &quot; &lt;&lt; marks3 &lt;&lt; endl;&#10;        int total = marks1 + marks2 + marks3;&#10;        double percent = total / 3.0;&#10;        cout &lt;&lt; &quot;Total: &quot; &lt;&lt; total &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Percentage: &quot; &lt;&lt; percent &lt;&lt; &quot;%&quot; &lt;&lt; endl;&#10;        char grade;&#10;        if (percent &gt;= 75) grade = 'A';&#10;        else if (percent &gt;= 60) grade = 'B';&#10;        else if (percent &gt;= 50) grade = 'C';&#10;        else if (percent &gt;= 40) grade = 'D';&#10;        else grade = 'F';&#10;        cout &lt;&lt; &quot;Grade: &quot; &lt;&lt; grade &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Student s;&#10;    s.acceptInfo();&#10;    s.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Program to create Student class and display info, total, percentage, grade&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Student {&#10;private:&#10;    int rollno;&#10;    int marks1;&#10;    int marks2;&#10;    int marks3;&#10;public:&#10;    void acceptInfo() {&#10;        cout &lt;&lt; &quot;Enter roll number: &quot;;&#10;        cin &gt;&gt; rollno;&#10;        cout &lt;&lt; &quot;Enter marks for 3 subjects: &quot;;&#10;        cin &gt;&gt; marks1 &gt;&gt; marks2 &gt;&gt; marks3;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Roll No: &quot; &lt;&lt; rollno &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks1: &quot; &lt;&lt; marks1 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks2: &quot; &lt;&lt; marks2 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks3: &quot; &lt;&lt; marks3 &lt;&lt; endl;&#10;        int total = marks1 + marks2 + marks3;&#10;        double percent = total / 3.0;&#10;        cout &lt;&lt; &quot;Total: &quot; &lt;&lt; total &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Percentage: &quot; &lt;&lt; percent &lt;&lt; &quot;%&quot; &lt;&lt; endl;&#10;        char grade;&#10;        if (percent &gt;= 75) {&#10;            grade = 'A';&#10;        } else if (percent &gt;= 60) {&#10;            grade = 'B';&#10;        } else if (percent &gt;= 50) {&#10;            grade = 'C';&#10;        } else if (percent &gt;= 40) {&#10;            grade = 'D';&#10;        } else {&#10;            grade = 'F';&#10;        }&#10;        cout &lt;&lt; &quot;Grade: &quot; &lt;&lt; grade &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Student s;&#10;    s.acceptInfo();&#10;    s.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/1_Student.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/1_Student.cpp" />
              <option name="originalContent" value="// 1. Student class with rollno, marks1, marks2, marks3&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Student {&#10;    int rollno;&#10;    int marks1, marks2, marks3;&#10;public:&#10;    void acceptInfo() {&#10;        cout &lt;&lt; &quot;Enter roll number: &quot;;&#10;        cin &gt;&gt; rollno;&#10;        cout &lt;&lt; &quot;Enter marks for 3 subjects: &quot;;&#10;        cin &gt;&gt; marks1 &gt;&gt; marks2 &gt;&gt; marks3;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Roll No: &quot; &lt;&lt; rollno &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks1: &quot; &lt;&lt; marks1 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks2: &quot; &lt;&lt; marks2 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks3: &quot; &lt;&lt; marks3 &lt;&lt; endl;&#10;        int total = marks1 + marks2 + marks3;&#10;        double percent = total / 3.0;&#10;        cout &lt;&lt; &quot;Total: &quot; &lt;&lt; total &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Percentage: &quot; &lt;&lt; percent &lt;&lt; &quot;%&quot; &lt;&lt; endl;&#10;        char grade;&#10;        if (percent &gt;= 75) grade = 'A';&#10;        else if (percent &gt;= 60) grade = 'B';&#10;        else if (percent &gt;= 50) grade = 'C';&#10;        else if (percent &gt;= 40) grade = 'D';&#10;        else grade = 'F';&#10;        cout &lt;&lt; &quot;Grade: &quot; &lt;&lt; grade &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Student s;&#10;    s.acceptInfo();&#10;    s.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 1. Student class with rollno, marks1, marks2, marks3&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Student {&#10;private:&#10;    int rollno;&#10;    int marks1;&#10;    int marks2;&#10;    int marks3;&#10;public:&#10;    void acceptInfo() {&#10;        cout &lt;&lt; &quot;Enter roll number: &quot;;&#10;        cin &gt;&gt; rollno;&#10;        cout &lt;&lt; &quot;Enter marks for 3 subjects: &quot;;&#10;        cin &gt;&gt; marks1 &gt;&gt; marks2 &gt;&gt; marks3;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Roll No: &quot; &lt;&lt; rollno &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks1: &quot; &lt;&lt; marks1 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks2: &quot; &lt;&lt; marks2 &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Marks3: &quot; &lt;&lt; marks3 &lt;&lt; endl;&#10;        int total = marks1 + marks2 + marks3;&#10;        double percent = total / 3.0;&#10;        cout &lt;&lt; &quot;Total: &quot; &lt;&lt; total &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Percentage: &quot; &lt;&lt; percent &lt;&lt; &quot;%&quot; &lt;&lt; endl;&#10;        char grade;&#10;        if (percent &gt;= 75) {&#10;            grade = 'A';&#10;        } else if (percent &gt;= 60) {&#10;            grade = 'B';&#10;        } else if (percent &gt;= 50) {&#10;            grade = 'C';&#10;        } else if (percent &gt;= 40) {&#10;            grade = 'D';&#10;        } else {&#10;            grade = 'F';&#10;        }&#10;        cout &lt;&lt; &quot;Grade: &quot; &lt;&lt; grade &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Student s;&#10;    s.acceptInfo();&#10;    s.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/2_Person.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/2_Person.cpp" />
              <option name="originalContent" value="// 2. Person class with name, age, city&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Person {&#10;    string name;&#10;    int age;&#10;    string city;&#10;public:&#10;    Person() : name(&quot;&quot;), age(0), city(&quot;&quot;) {}&#10;    Person(string n, int a, string c) : name(n), age(a), city(c) {}&#10;    void setName(string n) { name = n; }&#10;    void setAge(int a) { age = a; }&#10;    void setCity(string c) { city = c; }&#10;    string getName() { return name; }&#10;    int getAge() { return age; }&#10;    string getCity() { return city; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Name: &quot; &lt;&lt; name &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Age: &quot; &lt;&lt; age &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;City: &quot; &lt;&lt; city &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Person p1;&#10;    p1.setName(&quot;John&quot;);&#10;    p1.setAge(25);&#10;    p1.setCity(&quot;Pune&quot;);&#10;    p1.display();&#10;    Person p2(&quot;Alice&quot;, 30, &quot;Mumbai&quot;);&#10;    p2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 2. Person class with name, age, city&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Person {&#10;private:&#10;    string name;&#10;    int age;&#10;    string city;&#10;public:&#10;    Person() {&#10;        name = &quot;&quot;;&#10;        age = 0;&#10;        city = &quot;&quot;;&#10;    }&#10;    Person(string n, int a, string c) {&#10;        name = n;&#10;        age = a;&#10;        city = c;&#10;    }&#10;    void setName(string n) {&#10;        name = n;&#10;    }&#10;    void setAge(int a) {&#10;        age = a;&#10;    }&#10;    void setCity(string c) {&#10;        city = c;&#10;    }&#10;    string getName() {&#10;        return name;&#10;    }&#10;    int getAge() {&#10;        return age;&#10;    }&#10;    string getCity() {&#10;        return city;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Name: &quot; &lt;&lt; name &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Age: &quot; &lt;&lt; age &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;City: &quot; &lt;&lt; city &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Person p1;&#10;    p1.setName(&quot;John&quot;);&#10;    p1.setAge(25);&#10;    p1.setCity(&quot;Pune&quot;);&#10;    p1.display();&#10;    Person p2(&quot;Alice&quot;, 30, &quot;Mumbai&quot;);&#10;    p2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/3_Date.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/3_Date.cpp" />
              <option name="originalContent" value="// 3. Date class with dd, mm, yy&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;    int dd, mm, yy;&#10;public:&#10;    Date() : dd(1), mm(1), yy(2000) {}&#10;    Date(int d, int m, int y) : dd(d), mm(m), yy(y) {}&#10;    void setDay(int d) { dd = d; }&#10;    void setMonth(int m) { mm = m; }&#10;    void setYear(int y) { yy = y; }&#10;    int getDay() { return dd; }&#10;    int getMonth() { return mm; }&#10;    int getYear() { return yy; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Date: &quot; &lt;&lt; dd &lt;&lt; &quot;/&quot; &lt;&lt; mm &lt;&lt; &quot;/&quot; &lt;&lt; yy &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Date d1;&#10;    d1.display();&#10;    d1.setDay(15);&#10;    d1.setMonth(8);&#10;    d1.setYear(2025);&#10;    d1.display();&#10;    Date d2(2, 9, 2025);&#10;    d2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 3. Date class with dd, mm, yy&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;private:&#10;    int dd;&#10;    int mm;&#10;    int yy;&#10;public:&#10;    Date() {&#10;        dd = 1;&#10;        mm = 1;&#10;        yy = 2000;&#10;    }&#10;    Date(int d, int m, int y) {&#10;        dd = d;&#10;        mm = m;&#10;        yy = y;&#10;    }&#10;    void setDay(int d) {&#10;        dd = d;&#10;    }&#10;    void setMonth(int m) {&#10;        mm = m;&#10;    }&#10;    void setYear(int y) {&#10;        yy = y;&#10;    }&#10;    int getDay() {&#10;        return dd;&#10;    }&#10;    int getMonth() {&#10;        return mm;&#10;    }&#10;    int getYear() {&#10;        return yy;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Date: &quot; &lt;&lt; dd &lt;&lt; &quot;/&quot; &lt;&lt; mm &lt;&lt; &quot;/&quot; &lt;&lt; yy &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Date d1;&#10;    d1.display();&#10;    d1.setDay(15);&#10;    d1.setMonth(8);&#10;    d1.setYear(2025);&#10;    d1.display();&#10;    Date d2(2, 9, 2025);&#10;    d2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/4_Point.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/4_Point.cpp" />
              <option name="originalContent" value="// 4. Point class with x, y&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Point {&#10;    int x, y;&#10;public:&#10;    Point() : x(0), y(0) {}&#10;    Point(int xVal, int yVal) : x(xVal), y(yVal) {}&#10;    void setX(int xVal) { x = xVal; }&#10;    void setY(int yVal) { y = yVal; }&#10;    int getX() { return x; }&#10;    int getY() { return y; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Point: (&quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y &lt;&lt; &quot;)&quot; &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Point p1;&#10;    p1.display();&#10;    p1.setX(5);&#10;    p1.setY(10);&#10;    p1.display();&#10;    Point p2(3, 7);&#10;    p2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 4. Point class with x, y&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Point {&#10;private:&#10;    int x;&#10;    int y;&#10;public:&#10;    Point() {&#10;        x = 0;&#10;        y = 0;&#10;    }&#10;    Point(int xVal, int yVal) {&#10;        x = xVal;&#10;        y = yVal;&#10;    }&#10;    void setX(int xVal) {&#10;        x = xVal;&#10;    }&#10;    void setY(int yVal) {&#10;        y = yVal;&#10;    }&#10;    int getX() {&#10;        return x;&#10;    }&#10;    int getY() {&#10;        return y;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Point: (&quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y &lt;&lt; &quot;)&quot; &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Point p1;&#10;    p1.display();&#10;    p1.setX(5);&#10;    p1.setY(10);&#10;    p1.display();&#10;    Point p2(3, 7);&#10;    p2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/5_ComplexNumber.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/5_ComplexNumber.cpp" />
              <option name="originalContent" value="// 5. ComplexNumber class with real, imaginary&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class ComplexNumber {&#10;    double real, imaginary;&#10;public:&#10;    ComplexNumber() : real(0), imaginary(0) {}&#10;    ComplexNumber(double r, double i) : real(r), imaginary(i) {}&#10;    void setReal(double r) { real = r; }&#10;    void setImaginary(double i) { imaginary = i; }&#10;    double getReal() { return real; }&#10;    double getImaginary() { return imaginary; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Complex Number: &quot; &lt;&lt; real &lt;&lt; &quot; + &quot; &lt;&lt; imaginary &lt;&lt; &quot;i&quot; &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    ComplexNumber c1;&#10;    c1.display();&#10;    c1.setReal(3.5);&#10;    c1.setImaginary(2.1);&#10;    c1.display();&#10;    ComplexNumber c2(5.2, 4.8);&#10;    c2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 5. ComplexNumber class with real, imaginary&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class ComplexNumber {&#10;private:&#10;    double real;&#10;    double imaginary;&#10;public:&#10;    ComplexNumber() {&#10;        real = 0;&#10;        imaginary = 0;&#10;    }&#10;    ComplexNumber(double r, double i) {&#10;        real = r;&#10;        imaginary = i;&#10;    }&#10;    void setReal(double r) {&#10;        real = r;&#10;    }&#10;    void setImaginary(double i) {&#10;        imaginary = i;&#10;    }&#10;    double getReal() {&#10;        return real;&#10;    }&#10;    double getImaginary() {&#10;        return imaginary;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Complex Number: &quot; &lt;&lt; real &lt;&lt; &quot; + &quot; &lt;&lt; imaginary &lt;&lt; &quot;i&quot; &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    ComplexNumber c1;&#10;    c1.display();&#10;    c1.setReal(3.5);&#10;    c1.setImaginary(2.1);&#10;    c1.display();&#10;    ComplexNumber c2(5.2, 4.8);&#10;    c2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 4/6_Book.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 4/6_Book.cpp" />
              <option name="originalContent" value="// 4. Book class with bname, id, author, price&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Book {&#10;private:&#10;    int id;&#10;    string bname;&#10;    string author;&#10;    double price;&#10;public:&#10;    Book() {&#10;        id = 0;&#10;        bname = &quot;&quot;;&#10;        author = &quot;&quot;;&#10;        price = 0.0;&#10;    }&#10;    Book(int i, string n, string a, double p) {&#10;        id = i;&#10;        bname = n;&#10;        author = a;&#10;        price = p;&#10;    }&#10;    void setId(int i) { id = i; }&#10;    void setBname(string n) { bname = n; }&#10;    void setAuthor(string a) { author = a; }&#10;    void setPrice(double p) { price = p; }&#10;    int getId() { return id; }&#10;    string getBname() { return bname; }&#10;    string getAuthor() { return author; }&#10;    double getPrice() { return price; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Book ID: &quot; &lt;&lt; id &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Book Name: &quot; &lt;&lt; bname &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Author: &quot; &lt;&lt; author &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Price: &quot; &lt;&lt; price &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Book b1;&#10;    b1.setId(101);&#10;    b1.setBname(&quot;C++ Primer&quot;);&#10;    b1.setAuthor(&quot;Stanley Lippman&quot;);&#10;    b1.setPrice(599.99);&#10;    b1.display();&#10;&#10;    Book b2(102, &quot;Effective C++&quot;, &quot;Scott Meyers&quot;, 499.50);&#10;    b2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 4. Book class with bname, id, author, price&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Book {&#10;private:&#10;    int id;&#10;    string bname;&#10;    string author;&#10;    double price;&#10;public:&#10;    Book() {&#10;        id = 0;&#10;        bname = &quot;&quot;;&#10;        author = &quot;&quot;;&#10;        price = 0.0;&#10;    }&#10;    Book(int i, string n, string a, double p) {&#10;        id = i;&#10;        bname = n;&#10;        author = a;&#10;        price = p;&#10;    }&#10;    void setId(int i) { id = i; }&#10;    void setBname(string n) { bname = n; }&#10;    void setAuthor(string a) { author = a; }&#10;    void setPrice(double p) { price = p; }&#10;    int getId() { return id; }&#10;    string getBname() { return bname; }&#10;    string getAuthor() { return author; }&#10;    double getPrice() { return price; }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Book ID: &quot; &lt;&lt; id &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Book Name: &quot; &lt;&lt; bname &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Author: &quot; &lt;&lt; author &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Price: &quot; &lt;&lt; price &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Book b1;&#10;    b1.setId(101);&#10;    b1.setBname(&quot;C++ Primer&quot;);&#10;    b1.setAuthor(&quot;Stanley Lippman&quot;);&#10;    b1.setPrice(599.99);&#10;    b1.display();&#10;&#10;    Book b2(102, &quot;Effective C++&quot;, &quot;Scott Meyers&quot;, 499.50);&#10;    b2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 5/1_Date.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 5/1_Date.cpp" />
              <option name="originalContent" value="// 1. Date class with day, month, year&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;    int day, month, year;&#10;public:&#10;    Date() : day(1), month(1), year(2000) {}&#10;    Date(int d, int m, int y) : day(d), month(m), year(y) {}&#10;    void display() {&#10;        cout &lt;&lt; &quot;Date: &quot; &lt;&lt; day &lt;&lt; &quot;/&quot; &lt;&lt; month &lt;&lt; &quot;/&quot; &lt;&lt; year &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Date d1; // no-argument constructor&#10;    Date d2(2, 9, 2025); // parameterized constructor&#10;    cout &lt;&lt; &quot;Date using no-argument constructor: &quot;;&#10;    d1.display();&#10;    cout &lt;&lt; &quot;Date using parameterized constructor: &quot;;&#10;    d2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 1. Date class with day, month, year&#10;#include &lt;iostream&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;private:&#10;    int day;&#10;    int month;&#10;    int year;&#10;public:&#10;    Date() {&#10;        day = 1;&#10;        month = 1;&#10;        year = 2000;&#10;    }&#10;    Date(int d, int m, int y) {&#10;        day = d;&#10;        month = m;&#10;        year = y;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Date: &quot; &lt;&lt; day &lt;&lt; &quot;/&quot; &lt;&lt; month &lt;&lt; &quot;/&quot; &lt;&lt; year &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Date d1; // no-argument constructor&#10;    Date d2(2, 9, 2025); // parameterized constructor&#10;    cout &lt;&lt; &quot;Date using no-argument constructor: &quot;;&#10;    d1.display();&#10;    cout &lt;&lt; &quot;Date using parameterized constructor: &quot;;&#10;    d2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 5/2_Employee.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 5/2_Employee.cpp" />
              <option name="originalContent" value="// 2. Employee class with id, name, dob (Date)&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;    int day, month, year;&#10;public:&#10;    Date() : day(1), month(1), year(2000) {}&#10;    Date(int d, int m, int y) : day(d), month(m), year(y) {}&#10;    void accept() {&#10;        cout &lt;&lt; &quot;Enter day, month, year: &quot;;&#10;        cin &gt;&gt; day &gt;&gt; month &gt;&gt; year;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; day &lt;&lt; &quot;/&quot; &lt;&lt; month &lt;&lt; &quot;/&quot; &lt;&lt; year;&#10;    }&#10;};&#10;&#10;class Employee {&#10;    int id;&#10;    string name;&#10;    Date dob;&#10;public:&#10;    Employee() : id(0), name(&quot;&quot;), dob() {}&#10;    Employee(int i, string n, Date d) : id(i), name(n), dob(d) {}&#10;    void accept() {&#10;        cout &lt;&lt; &quot;Enter employee id: &quot;;&#10;        cin &gt;&gt; id;&#10;        cout &lt;&lt; &quot;Enter employee name: &quot;;&#10;        cin.ignore();&#10;        getline(cin, name);&#10;        cout &lt;&lt; &quot;Enter date of birth: &quot;;&#10;        dob.accept();&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;ID: &quot; &lt;&lt; id &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Name: &quot; &lt;&lt; name &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;DOB: &quot;;&#10;        dob.display();&#10;        cout &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Employee e1;&#10;    e1.accept();&#10;    cout &lt;&lt; &quot;\nEmployee Information:\n&quot;;&#10;    e1.display();&#10;    Date d(15, 8, 1990);&#10;    Employee e2(2, &quot;Alice&quot;, d);&#10;    cout &lt;&lt; &quot;\nEmployee 2 Information:\n&quot;;&#10;    e2.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 2. Employee class with id, name, dob (Date)&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Date {&#10;private:&#10;    int day;&#10;    int month;&#10;    int year;&#10;public:&#10;    Date() {&#10;        day = 1;&#10;        month = 1;&#10;        year = 2000;&#10;    }&#10;    Date(int d, int m, int y) {&#10;        day = d;&#10;        month = m;&#10;        year = y;&#10;    }&#10;    void accept() {&#10;        cout &lt;&lt; &quot;Enter day, month, year: &quot;;&#10;        cin &gt;&gt; day &gt;&gt; month &gt;&gt; year;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; day &lt;&lt; &quot;/&quot; &lt;&lt; month &lt;&lt; &quot;/&quot; &lt;&lt; year;&#10;    }&#10;};&#10;&#10;class Employee {&#10;private:&#10;    int id;&#10;    string name;&#10;    Date dob;&#10;public:&#10;    Employee() {&#10;        id = 0;&#10;        name = &quot;&quot;;&#10;        dob = Date();&#10;    }&#10;    Employee(int i, string n, Date d) {&#10;        id = i;&#10;        name = n;&#10;        dob = d;&#10;    }&#10;    void accept() {&#10;        cout &lt;&lt; &quot;Enter employee id: &quot;;&#10;        cin &gt;&gt; id;&#10;        cout &lt;&lt; &quot;Enter employee name: &quot;;&#10;        cin.ignore();&#10;        getline(cin, name);&#10;        cout &lt;&lt; &quot;Enter date of birth: &quot;;&#10;        dob.accept();&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;ID: &quot; &lt;&lt; id &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Name: &quot; &lt;&lt; name &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;DOB: &quot;;&#10;        dob.display();&#10;        cout &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    Employee e1;&#10;    e1.accept();&#10;    cout &lt;&lt; &quot;\nEmployee Information:\n&quot;;&#10;    e1.display();&#10;&#10;    Date d(15, 8, 1990);&#10;    Employee e2(2, &quot;Alice&quot;, d);&#10;    cout &lt;&lt; &quot;\nEmployee 2 Information:\n&quot;;&#10;    e2.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 6/1_EmpOrg.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 6/1_EmpOrg.cpp" />
              <option name="originalContent" value="// 1. Emp based organization structure with inheritance and polymorphism&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Emp {&#10;protected:&#10;    int id;&#10;    string name;&#10;    int deptId;&#10;    double basicSalary;&#10;public:&#10;    Emp(int id, string name, int deptId, double basicSalary)&#10;        : id(id), name(name), deptId(deptId), basicSalary(basicSalary) {}&#10;    virtual double computeNetSalary() {&#10;        return 0;&#10;    }&#10;    virtual void display() {&#10;        cout &lt;&lt; &quot;ID: &quot; &lt;&lt; id &lt;&lt; &quot;, Name: &quot; &lt;&lt; name &lt;&lt; &quot;, DeptID: &quot; &lt;&lt; deptId &lt;&lt; &quot;, Basic Salary: &quot; &lt;&lt; basicSalary;&#10;    }&#10;    virtual ~Emp() {}&#10;};&#10;&#10;class Mgr : public Emp {&#10;    double perfBonus;&#10;public:&#10;    Mgr(int id, string name, int deptId, double basicSalary, double perfBonus)&#10;        : Emp(id, name, deptId, basicSalary), perfBonus(perfBonus) {}&#10;    double computeNetSalary() override {&#10;        return basicSalary + perfBonus;&#10;    }&#10;    void display() override {&#10;        Emp::display();&#10;        cout &lt;&lt; &quot;, Perf Bonus: &quot; &lt;&lt; perfBonus;&#10;    }&#10;};&#10;&#10;class Worker : public Emp {&#10;    int hoursWorked;&#10;    double hourlyRate;&#10;public:&#10;    Worker(int id, string name, int deptId, double basicSalary, int hoursWorked, double hourlyRate)&#10;        : Emp(id, name, deptId, basicSalary), hoursWorked(hoursWorked), hourlyRate(hourlyRate) {}&#10;    double computeNetSalary() override {&#10;        return basicSalary + (hoursWorked * hourlyRate);&#10;    }&#10;    double getHourlyRate() {&#10;        return hourlyRate;&#10;    }&#10;    void display() override {&#10;        Emp::display();&#10;        cout &lt;&lt; &quot;, Hours Worked: &quot; &lt;&lt; hoursWorked &lt;&lt; &quot;, Hourly Rate: &quot; &lt;&lt; hourlyRate;&#10;    }&#10;};&#10;&#10;int main() {&#10;    const int MAX = 100;&#10;    Emp* org[MAX];&#10;    int count = 0;&#10;    int choice;&#10;    do {&#10;        cout &lt;&lt; &quot;\n1. Hire Manager\n2. Hire Worker\n3. Display all Employees\n4. Exit\nEnter choice: &quot;;&#10;        cin &gt;&gt; choice;&#10;        if (choice == 1) {&#10;            int id, deptId;&#10;            string name;&#10;            double basic, bonus;&#10;            cout &lt;&lt; &quot;Enter id, name, deptId, basic salary, perf bonus: &quot;;&#10;            cin &gt;&gt; id;&#10;            cin.ignore();&#10;            getline(cin, name);&#10;            cin &gt;&gt; deptId &gt;&gt; basic &gt;&gt; bonus;&#10;            org[count++] = new Mgr(id, name, deptId, basic, bonus);&#10;        } else if (choice == 2) {&#10;            int id, deptId, hours;&#10;            string name;&#10;            double basic, rate;&#10;            cout &lt;&lt; &quot;Enter id, name, deptId, basic salary, hours worked, hourly rate: &quot;;&#10;            cin &gt;&gt; id;&#10;            cin.ignore();&#10;            getline(cin, name);&#10;            cin &gt;&gt; deptId &gt;&gt; basic &gt;&gt; hours &gt;&gt; rate;&#10;            org[count++] = new Worker(id, name, deptId, basic, hours, rate);&#10;        } else if (choice == 3) {&#10;            for (int i = 0; i &lt; count; ++i) {&#10;                org[i]-&gt;display();&#10;                cout &lt;&lt; &quot;, Net Salary: &quot; &lt;&lt; org[i]-&gt;computeNetSalary() &lt;&lt; endl;&#10;            }&#10;        }&#10;    } while (choice != 4);&#10;    for (int i = 0; i &lt; count; ++i) delete org[i];&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 1. Emp based organization structure with inheritance and polymorphism&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class Emp {&#10;protected:&#10;    int id;&#10;    string name;&#10;    int deptId;&#10;    double basicSalary;&#10;public:&#10;    Emp(int id, string name, int deptId, double basicSalary)&#10;        : id(id), name(name), deptId(deptId), basicSalary(basicSalary) {}&#10;    virtual double computeNetSalary() {&#10;        return 0;&#10;    }&#10;    virtual void display() {&#10;        cout &lt;&lt; &quot;ID: &quot; &lt;&lt; id &lt;&lt; &quot;, Name: &quot; &lt;&lt; name &lt;&lt; &quot;, DeptID: &quot; &lt;&lt; deptId &lt;&lt; &quot;, Basic Salary: &quot; &lt;&lt; basicSalary;&#10;    }&#10;    virtual ~Emp() {}&#10;};&#10;&#10;class Mgr : public Emp {&#10;    double perfBonus;&#10;public:&#10;    Mgr(int id, string name, int deptId, double basicSalary, double perfBonus)&#10;        : Emp(id, name, deptId, basicSalary), perfBonus(perfBonus) {}&#10;    double computeNetSalary() override {&#10;        return basicSalary + perfBonus;&#10;    }&#10;    void display() override {&#10;        Emp::display();&#10;        cout &lt;&lt; &quot;, Perf Bonus: &quot; &lt;&lt; perfBonus;&#10;    }&#10;};&#10;&#10;class Worker : public Emp {&#10;    int hoursWorked;&#10;    double hourlyRate;&#10;public:&#10;    Worker(int id, string name, int deptId, double basicSalary, int hoursWorked, double hourlyRate)&#10;        : Emp(id, name, deptId, basicSalary), hoursWorked(hoursWorked), hourlyRate(hourlyRate) {}&#10;    double computeNetSalary() override {&#10;        return basicSalary + (hoursWorked * hourlyRate);&#10;    }&#10;    double getHourlyRate() {&#10;        return hourlyRate;&#10;    }&#10;    void display() override {&#10;        Emp::display();&#10;        cout &lt;&lt; &quot;, Hours Worked: &quot; &lt;&lt; hoursWorked &lt;&lt; &quot;, Hourly Rate: &quot; &lt;&lt; hourlyRate;&#10;    }&#10;};&#10;&#10;int main() {&#10;    const int MAX = 100;&#10;    Emp* org[MAX];&#10;    int count = 0;&#10;    int choice;&#10;    do {&#10;        cout &lt;&lt; &quot;\n1. Hire Manager\n2. Hire Worker\n3. Display all Employees\n4. Exit\nEnter choice: &quot;;&#10;        cin &gt;&gt; choice;&#10;        if (choice == 1) {&#10;            int id, deptId;&#10;            string name;&#10;            double basic, bonus;&#10;            cout &lt;&lt; &quot;Enter id, name, deptId, basic salary, perf bonus: &quot;;&#10;            cin &gt;&gt; id;&#10;            cin.ignore();&#10;            getline(cin, name);&#10;            cin &gt;&gt; deptId &gt;&gt; basic &gt;&gt; bonus;&#10;            org[count++] = new Mgr(id, name, deptId, basic, bonus);&#10;        } else if (choice == 2) {&#10;            int id, deptId, hours;&#10;            string name;&#10;            double basic, rate;&#10;            cout &lt;&lt; &quot;Enter id, name, deptId, basic salary, hours worked, hourly rate: &quot;;&#10;            cin &gt;&gt; id;&#10;            cin.ignore();&#10;            getline(cin, name);&#10;            cin &gt;&gt; deptId &gt;&gt; basic &gt;&gt; hours &gt;&gt; rate;&#10;            org[count++] = new Worker(id, name, deptId, basic, hours, rate);&#10;        } else if (choice == 3) {&#10;            for (int i = 0; i &lt; count; ++i) {&#10;                org[i]-&gt;display();&#10;                cout &lt;&lt; &quot;, Net Salary: &quot; &lt;&lt; org[i]-&gt;computeNetSalary() &lt;&lt; endl;&#10;            }&#10;        }&#10;    } while (choice != 4);&#10;    for (int i = 0; i &lt; count; ++i) delete org[i];&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 6/2_BankAccount.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 6/2_BankAccount.cpp" />
              <option name="originalContent" value="// 2. Bank Account Handling Application&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class BankAccount {&#10;private:&#10;    int acctNo;&#10;    string customerName;&#10;    double balance;&#10;public:&#10;    BankAccount(int acctNo, string customerName, double balance) {&#10;        this-&gt;acctNo = acctNo;&#10;        this-&gt;customerName = customerName;&#10;        this-&gt;balance = balance;&#10;    }&#10;    void withdraw(double amt) {&#10;        if (amt &gt; balance) {&#10;            cout &lt;&lt; &quot;Insufficient balance!&quot; &lt;&lt; endl;&#10;        } else {&#10;            balance -= amt;&#10;            cout &lt;&lt; &quot;Withdrawn: &quot; &lt;&lt; amt &lt;&lt; &quot;, New Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;        }&#10;    }&#10;    void deposit(double amt) {&#10;        balance += amt;&#10;        cout &lt;&lt; &quot;Deposited: &quot; &lt;&lt; amt &lt;&lt; &quot;, New Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Account No: &quot; &lt;&lt; acctNo &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Customer Name: &quot; &lt;&lt; customerName &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    BankAccount acc(101, &quot;John Doe&quot;, 5000);&#10;    acc.display();&#10;    acc.deposit(1500);&#10;    acc.withdraw(2000);&#10;    acc.withdraw(6000); // Should show insufficient balance&#10;    acc.display();&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 2. Bank Account Handling Application&#10;#include &lt;iostream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;class BankAccount {&#10;private:&#10;    int acctNo;&#10;    string customerName;&#10;    double balance;&#10;public:&#10;    BankAccount(int acctNo, string customerName, double balance) {&#10;        this-&gt;acctNo = acctNo;&#10;        this-&gt;customerName = customerName;&#10;        this-&gt;balance = balance;&#10;    }&#10;    void withdraw(double amt) {&#10;        if (amt &gt; balance) {&#10;            cout &lt;&lt; &quot;Insufficient balance!&quot; &lt;&lt; endl;&#10;        } else {&#10;            balance -= amt;&#10;            cout &lt;&lt; &quot;Withdrawn: &quot; &lt;&lt; amt &lt;&lt; &quot;, New Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;        }&#10;    }&#10;    void deposit(double amt) {&#10;        balance += amt;&#10;        cout &lt;&lt; &quot;Deposited: &quot; &lt;&lt; amt &lt;&lt; &quot;, New Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;    }&#10;    void display() {&#10;        cout &lt;&lt; &quot;Account No: &quot; &lt;&lt; acctNo &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Customer Name: &quot; &lt;&lt; customerName &lt;&lt; endl;&#10;        cout &lt;&lt; &quot;Balance: &quot; &lt;&lt; balance &lt;&lt; endl;&#10;    }&#10;};&#10;&#10;int main() {&#10;    BankAccount acc(101, &quot;John Doe&quot;, 5000);&#10;    acc.display();&#10;    acc.deposit(1500);&#10;    acc.withdraw(2000);&#10;    acc.withdraw(6000); // Should show insufficient balance&#10;    acc.display();&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab 7/5_FileIO.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab 7/5_FileIO.cpp" />
              <option name="originalContent" value="// 5. File IO Application&#10;#include &lt;iostream&gt;&#10;#include &lt;fstream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int choice;&#10;    do {&#10;        cout &lt;&lt; &quot;\n1. Write File\n2. Read File\n3. Copy File\n4. Exit\nEnter choice: &quot;;&#10;        switch (choice) {&#10;            case 1: {&#10;                string fname, data;&#10;                cout &lt;&lt; &quot;Enter filename: &quot;;&#10;                cin &gt;&gt; fname;&#10;                cout &lt;&lt; &quot;Enter data (end with # on a new line):&quot; &lt;&lt; endl;&#10;                ofstream fout(fname);&#10;                cin.ignore();&#10;                while (true) {&#10;                    getline(cin, data);&#10;                    if (data == &quot;#&quot;) break;&#10;                    fout &lt;&lt; data &lt;&lt; endl;&#10;                }&#10;                fout.close();&#10;                break;&#10;            }&#10;            case 2: {&#10;                string fname, line;&#10;                cout &lt;&lt; &quot;Enter filename: &quot;;&#10;                cin &gt;&gt; fname;&#10;                ifstream fin(fname);&#10;                if (!fin) {&#10;                    cout &lt;&lt; &quot;File not found!&quot; &lt;&lt; endl;&#10;                    break;&#10;                }&#10;                while (getline(fin, line)) {&#10;                    cout &lt;&lt; line &lt;&lt; endl;&#10;                }&#10;                fin.close();&#10;                break;&#10;            }&#10;            case 3: {&#10;                string src, dest, line;&#10;                cout &lt;&lt; &quot;Enter source filename: &quot;;&#10;                cin &gt;&gt; src;&#10;                cout &lt;&lt; &quot;Enter destination filename: &quot;;&#10;                cin &gt;&gt; dest;&#10;                ifstream fin(src);&#10;                if (!fin) {&#10;                    cout &lt;&lt; &quot;Source file not found!&quot; &lt;&lt; endl;&#10;                    break;&#10;                }&#10;                ofstream fout(dest);&#10;                while (getline(fin, line)) {&#10;                    fout &lt;&lt; line &lt;&lt; endl;&#10;                }&#10;                fin.close();&#10;                fout.close();&#10;                cout &lt;&lt; &quot;Copied.&quot; &lt;&lt; endl;&#10;                break;&#10;            }&#10;        }&#10;    } while (choice != 4);&#10;    return 0;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// 5. File IO Application&#10;#include &lt;iostream&gt;&#10;#include &lt;fstream&gt;&#10;#include &lt;string&gt;&#10;using namespace std;&#10;&#10;int main() {&#10;    int choice;&#10;    do {&#10;        cout &lt;&lt; &quot;\n1. Write File\n2. Read File\n3. Copy File\n4. Exit\nEnter choice: &quot;;&#10;        cin &gt;&gt; choice; // Fix: read user input for menu&#10;        switch (choice) {&#10;            case 1: {&#10;                string fname, data;&#10;                cout &lt;&lt; &quot;Enter filename: &quot;;&#10;                cin &gt;&gt; fname;&#10;                cout &lt;&lt; &quot;Enter data (end with # on a new line):&quot; &lt;&lt; endl;&#10;                ofstream fout(fname);&#10;                cin.ignore();&#10;                while (true) {&#10;                    getline(cin, data);&#10;                    if (data == &quot;#&quot;) break;&#10;                    fout &lt;&lt; data &lt;&lt; endl;&#10;                }&#10;                fout.close();&#10;                break;&#10;            }&#10;            case 2: {&#10;                string fname, line;&#10;                cout &lt;&lt; &quot;Enter filename: &quot;;&#10;                cin &gt;&gt; fname;&#10;                ifstream fin(fname);&#10;                if (!fin) {&#10;                    cout &lt;&lt; &quot;File not found!&quot; &lt;&lt; endl;&#10;                    break;&#10;                }&#10;                while (getline(fin, line)) {&#10;                    cout &lt;&lt; line &lt;&lt; endl;&#10;                }&#10;                fin.close();&#10;                break;&#10;            }&#10;            case 3: {&#10;                string src, dest, line;&#10;                cout &lt;&lt; &quot;Enter source filename: &quot;;&#10;                cin &gt;&gt; src;&#10;                cout &lt;&lt; &quot;Enter destination filename: &quot;;&#10;                cin &gt;&gt; dest;&#10;                ifstream fin(src);&#10;                if (!fin) {&#10;                    cout &lt;&lt; &quot;Source file not found!&quot; &lt;&lt; endl;&#10;                    break;&#10;                }&#10;                ofstream fout(dest);&#10;                while (getline(fin, line)) {&#10;                    fout &lt;&lt; line &lt;&lt; endl;&#10;                }&#10;                fin.close();&#10;                fout.close();&#10;                cout &lt;&lt; &quot;Copied.&quot; &lt;&lt; endl;&#10;                break;&#10;            }&#10;        }&#10;    } while (choice != 4);&#10;    return 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>